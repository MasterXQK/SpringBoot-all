<?xml version="1.0" encoding="UTF-8"?>
<configuration>
  <!--引入yml配置-->
  <springProperty name="LOG_PATH" source="log.path" defaultValue="/var/Amazon/logs/xqk"/>
  <springProperty name="LOG_TYPE" source="log.type" defaultValue="message"/>
  <springProperty name="LOG_LEVEL" source="log.level" defaultValue="INFO"/>
  <springProperty name="LOG_ENV" source="log.env" defaultValue="env"/>
  <springProperty name="LOG_APP" source="spring.application.name" defaultValue="demo-logback"/>
  <include resource="org/springframework/boot/logging/logback/defaults.xml"/>

  <!--
  $clr()(red) 重置颜色
  ${} 引用前文定义的变量
  %X{} 引用MDC中的变量
  %thread 引用线程名
  %logger{36} 引用logger名，最大长度为36
  eg: %X{traceId:-TRACE_ID} 引用MDC中的"traceId"，如果不存在则使用默认值"TRACE_ID"代替
  -->

  <!-- 输出日志如下:
  [2023-01-17 22:35:23.294] [main] [dev] [WARN] [TRACE_ID] [PARENT_ID] [SPAN_ID] [URI] [HTTP_METHOD] [PROTOCOL] [message] [com.xkcoding.logback.SpringBootDemoLogbackApplication] [Spring boot启动初始化了 132 个 Bean]
  [2023-01-17 22:35:45.725] [threadPoolTaskExecutor-1] [dev] [WARN] [Morgan-熊乾坤-0f7d356b-12dd-4fea-8a92-5fa613bf3cc2] [PARENT_ID] [SPAN_ID] [/demo/test-log2] [GET] [HTTP/1.1] [message] [com.xkcoding.logback.service.TestService] [【TestService】warn]
  -->
  <!--  日志模板-->
  <property name="file_info_pattern"
            value="[%d{yyyy-MM-dd HH:mm:ss.SSS}] %clr([%thread]) %clr([${LOG_ENV}]) %clr([%level]) %clr([%X{traceId:-TRACE_ID}]){magenta} [%X{parentId:-PARENT_ID}] [%X{spanId:-SPAN_ID}] %clr([%X{url:-URI}]) %clr([%X{method:-HTTP_METHOD}]) [%X{protocol:-PROTOCOL}] [${LOG_TYPE}] [%c] %clr([%msg]) %n"/>

  <!--ERROR日志模板-->
  <property name="FILE_ERROR_PATTERN"
            value="%date{yyyy-MM-dd HH:mm:ss.SSS} ${PID:- } [%-5level] [%thread]  %logger{36} %file:%line : - %msg%n"/>

	<appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>
		</filter>
		<encoder>
      <!-- 引用前文定义 -->
			<pattern>${file_info_pattern}</pattern>
			<charset>UTF-8</charset>
		</encoder>
	</appender>
  <!--配置异步打印日志-->
  <appender name="ASYNC_CONSOLE" class="ch.qos.logback.classic.AsyncAppender">
    <discardingThreshold>0</discardingThreshold>
    <queueSize>1024</queueSize>
    <neverBlock>true</neverBlock>
    <appender-ref ref="CONSOLE"/>
    <!-- 包含类名-->
    <includeCallerData>true</includeCallerData>
  </appender>

  <!-- 只输出 INFO WARN -->
	<appender name="FILE_INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!--如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高， 所以我们使用下面的策略，可以避免输出 Error 的日志-->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<!--过滤 Error-->
			<level>ERROR</level>
			<!--匹配到就禁止-->
			<onMatch>DENY</onMatch>
			<!--没有匹配到就允许-->
			<onMismatch>ACCEPT</onMismatch>
		</filter>
		<!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天的日志改名为今天的日期。即，<File> 的日志都是当天的。-->
		<!--<File>logs/info.demo-logback.log</File>-->
		<!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
			<FileNamePattern>${LOG_PATH}/${LOG_APP}/%d{yyyy-MM-dd}.info.log</FileNamePattern>
			<!--只保留最近90天的日志-->
			<maxHistory>90</maxHistory>
			<!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
		</rollingPolicy>
		<encoder>
			<pattern>${file_info_pattern}</pattern>
			<charset>UTF-8</charset> <!-- 此处设置字符集 -->
		</encoder>
<!--    <includeCallerData>true</includeCallerData>-->
  </appender>
  <!--配置异步打印日志-->
  <appender name="ASYNC_FILE_INFO" class="ch.qos.logback.classic.AsyncAppender">
    <discardingThreshold>0</discardingThreshold>
    <queueSize>1024</queueSize>
    <neverBlock>true</neverBlock>
    <appender-ref ref="FILE_INFO"/>
  </appender>

	<appender name="FILE_ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!--如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter-->
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>Error</level>
		</filter>
		<!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天的日志改名为今天的日期。即，<File> 的日志都是当天的。-->
		<!--<File>logs/error.demo-logback.log</File>-->
		<!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
      <FileNamePattern>${LOG_PATH}/${LOG_APP}/%d{yyyy-MM-dd}.error.log</FileNamePattern>
			<!--只保留最近90天的日志-->
			<maxHistory>90</maxHistory>
		</rollingPolicy>
		<encoder>
			<pattern>${FILE_ERROR_PATTERN}</pattern>
			<charset>UTF-8</charset> <!-- 此处设置字符集 -->
		</encoder>
  </appender>
  <!--配置异步打印日志-->
  <appender name="ASYNC_FILE_ERROR" class="ch.qos.logback.classic.AsyncAppender">
    <discardingThreshold>0</discardingThreshold>
    <queueSize>1024</queueSize>
    <neverBlock>true</neverBlock>
    <appender-ref ref="FILE_ERROR"/>
  </appender>

	<root level="info">
<!--		<appender-ref ref="CONSOLE"/>-->
<!--		<appender-ref ref="FILE_INFO"/>-->
<!--		<appender-ref ref="FILE_ERROR"/>-->
		<appender-ref ref="ASYNC_CONSOLE"/>
		<appender-ref ref="ASYNC_FILE_INFO"/>
		<appender-ref ref="ASYNC_FILE_ERROR"/>
	</root>
</configuration>
